<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
  ~
  ~ Project and contact information: http://www.cascading.org/
  ~
  ~ This file is part of the Cascading project.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project name="multitool" default="retrieve" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <dirname property="multitool.basedir" file="${ant.file.multitool}"/>

  <!-- load properties first -->
  <property file="../build.properties"/>
  <property file="./build.properties"/>

  <property name="src.license" location="${multitool.basedir}/apl.txt"/>

  <property name="src.dir" location="${multitool.basedir}/src/java"/>
  <property name="src.test" location="${multitool.basedir}/src/test"/>

  <available file="${src.dir}" type="dir" property="main.available"/>
  <available file="${src.test}" type="dir" property="test.available"/>

  <property name="lib.dir" location="${multitool.basedir}/lib"/>

  <property name="scripts.dir" location="${multitool.basedir}/bin"/>

  <property name="build.dir" location="${multitool.basedir}/build/"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>
  <property name="build.deps" location="${build.dir}/deps"/>

  <property name="test.results" location="${build.dir}/testresults"/>
  <property name="test.showoutput" value="no"/>

  <property name="dist" location="dist"/>

  <path id="project.class.path">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>

    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${build.deps}">
      <include name="*.jar"/>
    </fileset>

  </path>

  <target name="clean">

    <echo message="cleaning..."/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist}"/>
    <delete dir="${ant.project.name}.tgz"/>

  </target>

  <target name="compile">

    <echo message="building..."/>
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${src.dir}" destdir="${build.classes}" verbose="off" debug="true" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <target name="compile-test">

    <echo message="building..."/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${lib.dir}"/>

    <javac srcdir="${src.test}" destdir="${build.test}" verbose="off" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <!-- runs JUnit tests -->
  <target name="test" depends="compile,compile-test,mt-test" description="run the unit tests">
    <echo message="running all tests..."/>

    <mkdir dir="build/test/log"/>
    <mkdir dir="${test.results}"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="${log.data}"/>
      <sysproperty key="hadoop.log.dir" value="build/test/log"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="${test.results}" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <!-- runs roundup.sh tests -->
  <target name="mt-test" description="run the mt unit tests">
    <exec executable="/bin/sh" failonerror="true">
      <arg value="${src.test}/mt/helper/roundup.sh"/>
      <arg value="${src.test}/mt/*.sh"/>
    </exec>
  </target>

  <tstamp/>

  <target name="stamp-jar" depends="jar">
    <move file="${build.dir}/${ant.project.name}.jar"
          tofile="${build.dir}/${ant.project.name}-${DSTAMP}.jar"/>
  </target>

  <target name="jar" depends="compile" description="creates a Hadoop ready jar will all dependencies">
    <tstamp>
      <format property="TIMESTAMP" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <jar jarfile="${build.dir}/${ant.project.name}.jar">
      <fileset dir="${build.classes}"/>
      <fileset dir="${multitool.basedir}" includes="lib/"/>
      <manifest>
        <attribute name="Main-Class" value="${ant.project.name}/Main"/>
        <attribute name="Build-Date" value="${TIMESTAMP}"/>
      </manifest>
    </jar>

  </target>

  <target name="dist" depends="clean,retrieve,jar,stamp-jar" description="packages current project">
    <mkdir dir="${dist}"/>

    <copy todir="${dist}">
      <fileset dir=".">
        <include name="data/**"/>
        <include name="bin/**"/>
        <include name="README.txt"/>
      </fileset>

      <fileset dir="${build.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <copy file="${src.license}" tofile="${dist}/"/>

    <chmod perm="u+x">
      <fileset dir="${dist}/bin">
        <include name="**"/>
      </fileset>
    </chmod>
  </target>

  <target name="tar" depends="dist" description="creates an archive of current project">
    <tar destfile="${ant.project.name}-${DSTAMP}.tgz"
         compression="gzip">
      <tarfileset dir="dist/" prefix="${ant.project.name}-${DSTAMP}">
        <include name="**/**"/>
        <exclude name="bin/**"/>
      </tarfileset>
      <tarfileset dir="dist/" prefix="${ant.project.name}-${DSTAMP}" filemode="744">
        <include name="bin/**"/>
      </tarfileset>
    </tar>
  </target>

  <target name="s3-package" if="publish.aws.properties">

    <taskdef name="S3Upload" classname="dak.ant.taskdefs.S3Upload"/>

    <property file="${publish.aws.properties}"/>

    <echo message="http://${publish.bucket}/${ant.project.name}/2.0/${ant.project.name}-${DSTAMP}.tgz"
          file="latest.txt"/>

    <echo message="http://${publish.bucket}/${ant.project.name}/2.0/${ant.project.name}-${DSTAMP}.jar"
          file="latest-jar.txt"/>

    <S3Upload verbose="true"
              accessId="${publish.aws.accessId}"
              secretKey="${publish.aws.secretKey}"
              bucket="${publish.bucket}"
              prefix="${ant.project.name}/2.0/"
              publicRead="true">
      <fileset file="${ant.project.name}-${DSTAMP}.tgz"/>
      <fileset dir="${build.dir}/">
        <include name="${ant.project.name}-${DSTAMP}.jar"/>
      </fileset>
      <fileset file="latest.txt"/>
      <fileset file="latest-jar.txt"/>
    </S3Upload>

    <delete file="latest.txt"/>
    <delete file="latest-jar.txt"/>

  </target>

  <target name="publish" depends="clean,retrieve,test,tar,s3-package"/>

  <target name="retrieve" description="use Ivy to download dependencies">
    <ivy:settings id="ivy.conjars.settings" url="http://conjars.org/repo/ivysettings.xml"/>

    <ivy:retrieve file="${multitool.basedir}/ivy.xml" settingsRef="ivy.conjars.settings" conf="default"
                  pattern="${lib.dir}/[artifact]-[revision].[ext]" sync="true"/>

    <ivy:retrieve file="${multitool.basedir}/ivy.xml" settingsRef="ivy.conjars.settings" conf="test"
                  pattern="${build.dir}/deps/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="markdown" depends="jar" description="update the CLI reference file as GitHub markdown">
    <exec executable="${scripts.dir}/multitool" failonerror="true" output="${multitool.basedir}/COMMANDS.md" errorproperty="md.errors">
      <arg value="--markdown"/>
    </exec>
  </target>

</project>
