#!/usr/bin/env bash
# Copyright (c) 2011 Concurrent, Inc.

VERBOSE=0
INPUT_SOURCE=
OUTPUT_SINK=
CASCADING_ARGS=

STACK_INDENT=''
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
white="\033[0;37m"
MT_PATH=~/projects/cascading.multitool/build

function log () {
  echo -e "$STACK_INDENT$*"
}

function info () {
  STACK_INDENT=''
  echo -e ${mt_line/INFO/$green'INFO'$white}
}

function warn () {
  STACK_INDENT=''
  echo -e ${mt_line/WARN/$yellow'WARN'$white}
}

function error () {
  STACK_INDENT=''
  echo -e ${mt_line/ERROR/$red'ERROR'$white}
}

function stacktrace () {
  echo -e "$STACK_INDENT$red$*"
  STACK_INDENT="$STACK_INDENT  "
}

function run_multitool () {
  if [[ ! -e $INPUT_SOURCE ]]; then
    if [[ "$INPUT_SOURCE" ]]; then
      error "ERROR $INPUT_SOURCE does not exist!"
    else
      error "ERROR An input source must be specified."
    fi
    exit 1
  fi

  if [[ "$OUTPUT_SINK" == "" ]]; then 
    OUTPUT_SINK=`mktemp -dt cascading.multitool`
    OUTPUT_SINK="sink=$OUTPUT_SINK sink.replace=true"
    echo "Using temporary output sink: $OUTPUT_SINK"
  else
    OUTPUT_SINK="sink=$OUTPUT_SINK"
  fi

  hadoop jar $MT_PATH/multitool.jar source=$INPUT_SOURCE $* $OUTPUT_SINK 2>&1 | while read mt_line; do
    if echo $mt_line | grep INFO > /dev/null; then
      if [[ $VERBOSE -ne 0 ]]; then
        info $mt_line
      fi
    elif echo $mt_line | grep WARN > /dev/null; then
      warn $mt_line
    elif echo $mt_line | grep ERROR > /dev/null; then
      error $mt_line
    elif echo $mt_line | grep Exception > /dev/null; then
      stacktrace $mt_line
    elif [[ ! -z $DEBUG ]]; then
      log $mt_line
    fi
  done
  
  echo -ne $white
}

if [[ $# -gt 0 ]]; then
  if [[ ${1:0:1} != '-' ]]; then
    if ! echo $1 | grep '=' > /dev/null; then
      INPUT_SOURCE=$1
      shift
    fi
  fi
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_usage
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -i|--input)
      if [[ -n "${2:-}" ]] ; then
        INPUT_SOURCE="$2"
        shift
      else
        echo "$1 must be followed by an input source."
        exit 1
      fi
      ;;
    -o|--output)
      if [[ -n "${2:-}" ]] ; then
        OUTPUT_SINK="$2"
        shift
      else
        echo "$1 must be followed by an output sink."
        exit 1
      fi
      ;;
    *)
      MT_ARGS="$MT_ARGS $1"
      ;;
  esac
  shift
done

run_multitool $MT_ARGS

